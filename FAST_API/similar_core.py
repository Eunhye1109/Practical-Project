# similar.py  (슬림 교체본)
import re
from typing import List, Dict, Tuple

# =========================
# 🧱 Top100 하드코딩 (후보 풀)
# =========================
TOP100: List[Tuple[str, str]] = [
    ("005930","삼성전자"), ("000660","SK하이닉스"), ("373220","LG에너지솔루션"),
    ("207940","삼성바이오로직스"), ("005380","현대차"), ("000270","기아"),
    ("051910","LG화학"), ("068270","셀트리온"), ("006400","삼성SDI"),
    ("035420","NAVER"), ("035720","카카오"), ("028260","삼성물산"),
    ("066570","LG전자"), ("003550","LG"), ("005490","POSCO홀딩스"),
    ("012330","현대모비스"), ("051900","LG생활건강"), ("055550","신한지주"),
    ("105560","KB금융"), ("034730","SK"), ("259960","크래프톤"),
    ("096770","SK이노베이션"), ("010950","S-Oil"), ("003670","포스코케미칼"),
    ("011200","HMM"), ("000810","삼성화재"), ("086790","하나금융지주"),
    ("316140","우리금융지주"), ("086520","에코프로"), ("066970","엘앤에프"),
    ("011170","롯데케미칼"), ("010130","고려아연"), ("251270","넷마블"),
    ("035510","신세계"), ("034020","두산에너빌리티"), ("006800","미래에셋증권"),
    ("005940","NH투자증권"), ("326030","SK바이오팜"), ("018260","삼성에스디에스"),
    ("032830","삼성생명"), ("180640","한진칼"), ("003490","대한항공"),
    ("272210","한화시스템"), ("047810","한국항공우주"),
    ("017670","SK텔레콤"), ("030200","KT"), ("035600","KG이니시스"),
    ("069620","대웅제약"), ("128940","한미약품"), ("000720","현대건설"),
    ("006360","GS건설"), ("161390","한국타이어앤테크놀로지"), ("033780","KT&G"),
    ("139480","이마트"), ("204320","만도"), ("267250","HD현대"),
    ("010620","HD현대일렉트릭"), ("009540","한국조선해양"), ("009150","삼성전기"),
    ("000990","DB하이텍"), ("021240","코웨이"), ("002790","아모레G"),
    ("090430","아모레퍼시픽"), ("028050","삼성엔지니어링"), ("024110","기업은행"),
    ("003410","쌍용C&E"), ("032640","LG유플러스"),
    ("011780","금호석유화학"), ("017800","현대엘리베이터"), ("006650","대한유화"),
    ("011070","LG이노텍"), ("093370","후성")
    # 필요 시 더 채워 넣어도 OK
]

# =========================
# 🔤 유사도 코어 (bigrams + Jaccard)
# =========================
def _norm(s: str) -> str:
    if not s: return ""
    s = s.strip().lower()
    return re.sub(r"[^0-9a-z가-힣]", "", s)

def _bigrams(s: str) -> set:
    if len(s) < 2:
        return {s} if s else set()
    return {s[i:i+2] for i in range(len(s)-1)}

def _jaccard(a: str, b: str) -> float:
    A, B = _bigrams(_norm(a)), _bigrams(_norm(b))
    if not A and not B: return 1.0
    if not A or not B:  return 0.0
    inter = len(A & B); union = len(A | B)
    return inter / union if union else 0.0

def score_topk_from_top100(base: str, topk: int = 3) -> List[Dict]:
    names = [nm for _, nm in TOP100]
    seen = set()
    scored: List[Dict] = []
    for nm in names:
        if not nm or nm in seen: 
            continue
        seen.add(nm)
        sim = round(_jaccard(base, nm) * 100.0, 1)
        scored.append({
            "name": nm,
            "similarity": sim,
            "reason": "문자 bigram 유사도 기반"
        })
    scored.sort(key=lambda x: x["similarity"], reverse=True)
    return scored[: max(1, topk)]
